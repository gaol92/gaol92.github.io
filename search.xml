<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[My First Blog]]></title>
    <url>%2F2019%2F03%2F26%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[1、搭建GitHub博客之前的前提条件 已在GitHub上注册了一个账号 Windows上已安装了node.js、npm cmd下键入node -v检测是否安装了node.js；键入npm -v检测是否安装了npm Window上已安装了git for windows 2、搭建GitHub博客之前的准备 在GitHub中创建仓库，仓库的名称必须为：github用户名.github.io（如果不够买域名的话，该名称就是未来个人博客的访问地址） 配置SSH key 3、开始动手搭建基于GitHub+Hexo的个人博客 测试代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445import timedef save_log(): print('Saving logger......')def logger(flag=False): def compute_time(f): # def compute_time(f,flag=False) def inner(*args): # 虽然装饰器函数运行结束了，但闭包函数仍可以访问装饰器函数的Enclosing变量 s_time = time.time() f(*args) cost_time = time.time() - s_time print(f'cost time:&#123;cost_time&#125;') if flag == True: save_log() return inner return compute_time @logger(True) # 错误：f1 = logger(f,True)，“@logger(True)”相当于“f1 = logger(True)(f1)” # 错误：@compute_time(f1,flag=True) # @compute_time # f1 = compute_time(f1)def f1(*args): sum = 0 for i in args: sum += i print(sum) time.sleep(1)@logger() # f2 = logger()(f2)# @compute_time # f2 = compute_time(f2)def f2(*args): print(args) time.sleep(0.5)if __name__ == '__main__': # f1 = compute_time(f1,True) # f1是和原函数“f1(*args)”同名的闭包函数的地址变量 # f1 = logger(True)(f1) f1(1,2,3,4,5) # f2 = compute_time(f2) # f2 = logger(True)(f2) f2(2,4,6,8,10)]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用GitHub Pages+Hexo搭建免费个性化博客]]></title>
    <url>%2F2019%2F03%2F26%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GitHub%20Pages%2BHexo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E6%80%A7%E5%8C%96%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1、搭建GitHub博客之前的前提条件 有一个GitHub账号 Windows上已安装了node.js、npm：cmd下键入node -v检测是否安装了node.js；键入npm -v检测是否安装了npm Window上已安装了git for windows 2、搭建GitHub博客之前的准备 在GitHub中创建仓库，仓库的名称必须为：github用户名.github.io（如果不够买域名的话，该名称就是未来个人博客的访问地址，例如：https://gaol92.github.io/） 配置SSH key 3、开始动手搭建基于GitHub Pages+Hexo的个人博客3-1、首先大概了解一下什么是Hexo和GitHub Pages Hexo是基于node.js的一个博客框架，它可以帮助我们将写好的markdown博文渲染成静态网页，然后我们通过Hexo的命令就可以将我们的博文以网页的形式发布到我们的服务器上。 Github Pages是一个静态网站托管服务，用来管理你的来自一个GitHub库的个人的、组织的、或者项目的页面。即Github Pages是github上的一项功能，可以放置网页文件到指定文件夹，然后给你一个专属域名用于展示一些项目，但现在大多用来开发制作个人博客网站。 3-2、开始个人博客网站的搭建之旅（以下所有命令均在git-bash中操作） 安装hexo： 首先在电脑的某个盘下新建一个文件夹用来存储hexo的所有文件，例如我的是：D:/Hexo git-bash命令行下输入：npm install -g hexo 初始化hexo：进入到新建目录中（例如：cd D:/Hexo），输入命令：hexo init，之后会在该目录下生成以下目录及文件： 123456|目录/文件 |作用 ||:---|:---|| scaffolds | 该目录放的是一些通用的markdown模板 || source | 资源目录，_posts发布的文章 || themes | 博客主题目录，默认的主题landscape就放在此目录 || _config.yml | 站点配置文件（主题目录下也有个此文件，是主题配置文件） | 使用markdown解析文章，生成静态网页文件：键入命令hexo g。此时会在D:/Hexo目录下生成public目录，此目录存放的就是生成的静态文件，这个目录最终会发布到服务器 本地测试博客效果：输入命令hexo s，然后在浏览器中键入http://localhost:4000查看效果，默认使用的是Hexo自带的landscape主题，默认有一篇博文Hello World（该博文的markdown文件就放在D:\Hexo\source\_posts目录下） 发布到Github Pages上，使用专有域名访问自己的博客网站：https://github用户名.github.io 在站点配置文件_config.yml中配置deploy属性，例如我的是： 1234deploy: type: git repository: git@github.com:gaol92/gaol92.github.io.git # 此处改为自己的Github仓库地址 branch: master 键入hexo d命令发布到GitHub Pages，如果做了配置文件的修改或markdown博文的编辑的话，先hexo g 如果此时报错：Deployer not found: git，那么在git-bash下安装一个插件：npm install hexo-deployer-git --save 如果报错：ERROR Local hexo not found in D:\Hexo，参看博客：搭建Hexo博客在git上执行 hexo d /hexo g 报错:ERROR Local hexo not found in D:\hexo 解决 至此，基于GitHub Pages和Hexo的博客框架就搭好了，接下来要做的就是个性化配置我们的博客……]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>github pages</tag>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
</search>
